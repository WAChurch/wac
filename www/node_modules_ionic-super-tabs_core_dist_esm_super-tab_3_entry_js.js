"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic-super-tabs_core_dist_esm_super-tab_3_entry_js"],{

/***/ 701:
/*!***************************************************************************!*\
  !*** ./node_modules/@ionic-super-tabs/core/dist/esm/super-tab_3.entry.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "super_tab": () => (/* binding */ SuperTabComponent),
/* harmony export */   "super_tabs": () => (/* binding */ SuperTabsComponent),
/* harmony export */   "super_tabs_container": () => (/* binding */ SuperTabsContainerComponent)
/* harmony export */ });
/* harmony import */ var C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator */ 2783);
/* harmony import */ var _index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-a34c410e.js */ 797);
/* harmony import */ var _utils_640d2cf5_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils-640d2cf5.js */ 9886);



const superTabComponentCss = ":host{height:var(--super-tab-height, 100%);position:relative;display:block;overflow-x:hidden;overflow-y:auto;contain:size style;z-index:1;-ms-flex-negative:0;flex-shrink:0;-ms-flex-positive:0;flex-grow:0;width:var(--super-tab-width, 100vw);-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);-webkit-box-sizing:border-box;box-sizing:border-box;-ms-flex-order:-1;order:-1;-webkit-user-select:none;-webkit-touch-callout:none;-webkit-text-size-adjust:none;-webkit-tap-highlight-color:rgba(0, 0, 0, 0);-webkit-font-smoothing:antialiased}:host[noScroll]{overflow-y:hidden}ion-nav,ion-content{height:100%;max-height:100%;position:absolute}ion-nav>.ion-page,ion-content>.ion-page{position:absolute}";

class SuperTabComponent {
  constructor(hostRef) {
    (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
  }

  componentDidLoad() {
    this.checkIonContent();
  }

  componentDidUpdate() {
    // check for ion-content after update, in case it was dynamically loaded
    this.checkIonContent();
  }
  /**
   * Check if we have an ion-content as a child and update the `noScroll` property
   * if it's not set yet.
   */


  checkIonContent() {
    if (typeof this.noScroll !== 'boolean') {
      const ionContentEl = this.el.querySelector('ion-content');

      if (ionContentEl && ionContentEl.parentElement === this.el) {
        this.noScroll = true;
      }
    }
  }
  /**
   * Returns the root scrollable element
   */


  getRootScrollableEl() {
    var _this = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this.noScroll && _this.el.scrollHeight > _this.el.clientHeight) {
        return _this.el;
      }

      const ionContent = _this.el.querySelector('ion-content');

      if (ionContent) {
        return ionContent.getScrollElement();
      }

      if (_this.noScroll) {
        return null;
      }

      return _this.el;
    })();
  }

  render() {
    return (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null);
  }

  get el() {
    return (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

}

SuperTabComponent.style = superTabComponentCss;
const superTabsComponentCss = ":host{height:100%;max-height:100%;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;overflow:hidden;z-index:1;position:relative;contain:layout size style;-ms-flex-order:-1;order:-1;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-touch-callout:none;-webkit-text-size-adjust:none;-webkit-tap-highlight-color:rgba(0, 0, 0, 0);-webkit-font-smoothing:antialiased;-ms-touch-action:none;touch-action:none;-webkit-box-sizing:border-box;box-sizing:border-box;margin:0;padding:0}";
const maxInitRetries = 1e3;
/**
 * Root component that controls the other super-tab components.
 *
 * This component propagates configuration over to children and keeps track of the tabs state.
 */

class SuperTabsComponent {
  constructor(hostRef) {
    (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    /**
     * Initial active tab index.
     * Defaults to `0`.
     *
     * @type {number}
     */

    this.activeTabIndex = 0;
    this._config = _utils_640d2cf5_js__WEBPACK_IMPORTED_MODULE_2__.D;
    this.initAttempts = 0;
    this.initPromise = new Promise(resolve => {
      this.initPromiseResolve = resolve;
    });
    this.tabChange = (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "tabChange", 7);
  }
  /**
   * Set/update the configuration
   * @param {SuperTabsConfig} config Configuration object
   */


  setConfig(config) {
    var _this2 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this2._config = Object.assign(Object.assign({}, _utils_640d2cf5_js__WEBPACK_IMPORTED_MODULE_2__.D), config);
    })();
  }

  propagateConfig() {
    this.container && (this.container.config = this._config);
    this.toolbar && (this.toolbar.config = this._config);
  }
  /**
   * Set the selected tab.
   * This will move the container and the toolbar to the selected tab.
   * @param index {number} the index of the tab you want to select
   * @param [animate=true] {boolean} whether you want to animate the transition
   * @param [emit=true] {boolean} whether you want to emit tab change event
   */


  selectTab(index, animate = true, emit = true) {
    var _this3 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this3.debug('selectTab', index, animate);

      yield _this3.initPromise;
      const lastIndex = _this3.activeTabIndex;

      if (_this3.container) {
        yield _this3.container.setActiveTabIndex(index, true, animate);
      }

      if (_this3.toolbar) {
        yield _this3.toolbar.setActiveTab(index, true, animate);
      }

      if (emit) {
        _this3.emitTabChangeEvent(index, lastIndex);
      }

      _this3.activeTabIndex = lastIndex;
    })();
  }

  onConfigChange(config) {
    var _this4 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield _this4.setConfig(config);
    })();
  }

  onWindowResize() {
    this.debug('onWindowResize');
    this.toolbar && this.toolbar.setSelectedTab(this.activeTabIndex);
    this.container.reindexTabs();
  }

  componentWillLoad() {
    var _this5 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this5.config) {
        yield _this5.setConfig(_this5.config);
      }
    })();
  }

  componentDidLoad() {
    this.debug('componentDidLoad'); // index children

    this.indexChildren(); // set the selected tab so the toolbar & container are aligned and in sync

    if (this.container) {
      this.container.setActiveTabIndex(this.activeTabIndex, true, false);
    }

    if (this.toolbar) {
      this.toolbar.setActiveTab(this.activeTabIndex, true, false);
    } // listen to `slotchange` event to detect any changes in children


    this.el.shadowRoot.addEventListener('slotchange', this.onSlotchange.bind(this));
    requestAnimationFrame(() => {
      this.initComponent();
    });
  }

  initComponent() {
    if (!this.container) {
      if (++this.initAttempts <= maxInitRetries) {
        requestAnimationFrame(() => {
          this.initComponent();
        });
        return;
      } else {
        this.debug(`container still doesn't exists after ${maxInitRetries} frames`);
      }
    }

    if (this.container) {
      this.container.setActiveTabIndex(this.activeTabIndex, true, false);
    }

    if (this.toolbar) {
      this.toolbar.setActiveTab(this.activeTabIndex, true);
    }

    this.propagateConfig();
    this.setupEventListeners();
    this.initPromiseResolve();
  }
  /**
   * Setup event listeners to synchronize child components
   */


  setupEventListeners() {
    var _this6 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this6.container) {
        yield _this6.container.componentOnReady();

        _this6.el.addEventListener('selectedTabIndexChange', _this6.onContainerSelectedTabChange.bind(_this6));

        _this6.el.addEventListener('activeTabIndexChange', _this6.onContainerActiveTabChange.bind(_this6));
      } else {
        _this6.debug('setupEventListeners: container does not exist');
      }

      if (_this6.toolbar) {
        yield _this6.toolbar.componentOnReady();

        _this6.el.addEventListener('buttonClick', _this6.onToolbarButtonClick.bind(_this6));
      } else {
        _this6.debug('setupEventListeners: toolbar does not exist');
      }
    })();
  }

  onContainerSelectedTabChange(ev) {
    var _this7 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this7.debug('onContainerSelectedTabChange called with: ', ev);

      if (_this7.toolbar) {
        yield _this7.toolbar.setSelectedTab(ev.detail);
      }
    })();
  }

  emitTabChangeEvent(newIndex, oldIndex) {
    if (typeof newIndex !== 'number' || newIndex < 0) {
      return;
    }

    if (typeof oldIndex !== 'number' || oldIndex < 0) {
      oldIndex = this.activeTabIndex;
    }

    this.tabChange.emit({
      changed: newIndex !== oldIndex,
      index: newIndex
    });
  }

  onContainerActiveTabChange(ev) {
    this.debug('onContainerActiveTabChange', ev);
    const index = ev.detail;
    this.emitTabChangeEvent(index);
    this.activeTabIndex = index;
    this.toolbar && this.toolbar.setActiveTab(index, true, true);
  }

  onToolbarButtonClick(ev) {
    this.debug('onToolbarButtonClick', ev);
    const {
      index
    } = ev.detail;
    this.container && this.container.setActiveTabIndex(index, true, true);
    this.emitTabChangeEvent(index);
    this.activeTabIndex = index;
  }

  indexChildren() {
    this.debug('indexChildren');
    const container = this.el.querySelector('super-tabs-container');
    const toolbar = this.el.querySelector('super-tabs-toolbar');

    if (container && this.container !== container) {
      this.container = container;
    }

    if (toolbar && this.toolbar !== toolbar) {
      this.toolbar = toolbar;
    }

    this.propagateConfig();
  }

  onSlotchange() {
    var _this8 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // re-index the child components
      _this8.indexChildren(); // reselect the current tab to ensure that we're on the correct tab


      _this8.selectTab(_this8.activeTabIndex, true, false);
    })();
  }
  /**
   * Internal method to output values in debug mode.
   */


  debug(...vals) {
    (0,_utils_640d2cf5_js__WEBPACK_IMPORTED_MODULE_2__.d)(this._config, 'tabs', vals);
  }

  render() {
    // Render 3 slots
    // Top & bottom slots allow the toolbar position to be configurable via slots.
    // The nameless slot is used to hold the `super-tabs-container`.
    return (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.H, null, (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "top"
    }), (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null), (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "bottom"
    }));
  }

  get el() {
    return (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

  static get watchers() {
    return {
      "config": ["onConfigChange"]
    };
  }

}

SuperTabsComponent.style = superTabsComponentCss;
const superTabsContainerComponentCss = ":host{display:-ms-flexbox;display:flex;-ms-flex-flow:row nowrap;flex-flow:row nowrap;min-width:100%;-ms-flex:1 1 auto;flex:1 1 auto;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;width:var(--super-tab-width, 100vw);height:var(--super-tab-height, 100%);overflow:hidden;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);-ms-touch-action:pan-y;touch-action:pan-y;-moz-user-select:none;-ms-user-select:none;user-select:none;will-change:scroll-position;-ms-flex-order:-1;order:-1;-webkit-user-select:none;-webkit-touch-callout:none;-webkit-text-size-adjust:none;-webkit-tap-highlight-color:rgba(0, 0, 0, 0);-webkit-font-smoothing:antialiased}";

class SuperTabsContainerComponent {
  constructor(hostRef) {
    (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    /**
     * Enable/disable swiping
     */

    this.swipeEnabled = true;
    /**
     * Set to true to automatically scroll to the top of the tab when the button is clicked while the tab is
     * already selected.
     */

    this.autoScrollTop = false;
    this.tabs = [];
    this.isDragging = false;
    this.leftThreshold = 0;
    this.rightThreshold = 0;
    this.scrollWidth = 0;
    this.width = 0;
    this.activeTabIndexChange = (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "activeTabIndexChange", 7);
    this.selectedTabIndexChange = (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "selectedTabIndexChange", 7);
    this.queue = (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "queue");
  }

  componentDidLoad() {
    var _this9 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this9.debug('componentDidLoad');

      _this9.updateWidth();

      yield _this9.indexTabs();
      _this9.slot = _this9.el.shadowRoot.querySelector('slot');

      _this9.slot.addEventListener('slotchange', _this9.onSlotChange.bind(_this9));
    })();
  }

  onSlotChange() {
    var _this10 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this10.debug('onSlotChange', _this10.tabs.length);

      _this10.updateWidth();

      _this10.indexTabs();
    })();
  }

  componentDidRender() {
    var _this11 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this11.updateWidth();
    })();
  }
  /**
   * @internal
   */


  reindexTabs() {
    var _this12 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this12.updateWidth();

      yield _this12.indexTabs();
    })();
  }
  /**
   * @internal
   *
   * Moves the container to align with the specified tab index
   * @param index {number} Index of the tab
   * @param animate {boolean} Whether to animate the transition
   */


  moveContainerByIndex(index, animate) {
    const scrollX = this.indexToPosition(index);

    if (scrollX === 0 && index > 0) {
      return Promise.resolve();
    }

    return this.moveContainer(scrollX, animate);
  }
  /**
   * @internal
   *
   * Sets the scrollLeft property of the container
   * @param scrollX {number}
   * @param animate {boolean}
   */


  moveContainer(scrollX, animate) {
    if (animate) {
      (0,_utils_640d2cf5_js__WEBPACK_IMPORTED_MODULE_2__.s)(this.el, scrollX, 0, this.config.nativeSmoothScroll, this.config.transitionDuration);
    } else {
      this.el.scroll(scrollX, 0);
    }

    return Promise.resolve();
  }
  /** @internal */


  setActiveTabIndex(index, moveContainer = true, animate = true) {
    var _this13 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this13.debug('setActiveTabIndex', index);

      if (_this13._activeTabIndex === index) {
        if (!_this13.autoScrollTop) {
          return;
        }

        _this13.scrollToTop();
      }

      if (moveContainer) {
        _this13.moveContainerByIndex(index, animate);
      }

      _this13.updateActiveTabIndex(index, false);
    })();
  }
  /**
   * Scroll the active tab to the top.
   */


  scrollToTop() {
    var _this14 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this14._activeTabIndex === undefined || _this14.tabs === undefined) {
        _this14.debug('scrollToTop', 'activeTabIndex or tabs was undefined', _this14._activeTabIndex, _this14.tabs);

        return;
      }

      const current = _this14.tabs[_this14._activeTabIndex];

      if (!current) {
        _this14.debug('Current active tab was undefined in scrollToTop');

        return;
      }

      const el = yield current.getRootScrollableEl();

      if (el) {
        (0,_utils_640d2cf5_js__WEBPACK_IMPORTED_MODULE_2__.s)(el, 0, 0, _this14.config.nativeSmoothScroll, _this14.config.transitionDuration);
      } else {
        _this14.debug('scrollToTop', 'couldnt find a scrollable element');
      }
    })();
  }

  updateActiveTabIndex(index, emit = true) {
    this.debug('updateActiveTabIndex', index, emit, this._activeTabIndex);
    this._activeTabIndex = index;
    emit && this.activeTabIndexChange.emit(this._activeTabIndex);
  }

  updateSelectedTabIndex(index) {
    if (index === this._selectedTabIndex) {
      return;
    }

    this._selectedTabIndex = index;
    this.selectedTabIndexChange.emit(this._selectedTabIndex);
  }

  onTouchStart(ev) {
    var _this15 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this15.swipeEnabled) {
        return;
      }

      if (_this15.config.avoidElements) {
        let avoid = false;
        let element = ev.target;

        if (element) {
          do {
            if (typeof element.getAttribute === 'function' && element.getAttribute('avoid-super-tabs')) {
              return;
            }

            element = element.parentElement;
          } while (element && !avoid);
        }
      }

      const coords = (0,_utils_640d2cf5_js__WEBPACK_IMPORTED_MODULE_2__.p)(ev);

      _this15.updateWidth();

      const vw = _this15.width;

      if (coords.x < _this15.leftThreshold || coords.x > vw - _this15.rightThreshold) {
        // ignore this gesture, it started in the side menu touch zone
        return;
      }

      if (_this15.config.shortSwipeDuration > 0) {
        _this15.initialTimestamp = (0,_utils_640d2cf5_js__WEBPACK_IMPORTED_MODULE_2__.a)();
      }

      _this15.initialCoords = coords;
      _this15.lastPosX = coords.x;
    })();
  }

  onClick(ev) {
    var _this16 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this16.isDragging) {
        ev.stopImmediatePropagation();
        ev.preventDefault();
      }
    })();
  }

  onTouchMove(ev) {
    var _this17 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this17.swipeEnabled || !_this17.initialCoords || typeof _this17.lastPosX !== 'number') {
        return;
      }

      const coords = (0,_utils_640d2cf5_js__WEBPACK_IMPORTED_MODULE_2__.p)(ev);

      if (!_this17.isDragging) {
        if (!(0,_utils_640d2cf5_js__WEBPACK_IMPORTED_MODULE_2__.c)(coords, _this17.initialCoords, _this17.config)) {
          if (Math.abs(coords.y - _this17.initialCoords.y) > 100) {
            _this17.initialCoords = void 0;
            _this17.lastPosX = void 0;
          }

          return;
        }

        _this17.isDragging = true;
      } // stop anything else from capturing these events, to make sure the content doesn't slide


      if (!_this17.config.allowElementScroll) {
        ev.stopImmediatePropagation();
      } // get delta X


      const deltaX = _this17.lastPosX - coords.x;

      if (deltaX === 0) {
        return;
      }

      const scrollX = Math.max(0, Math.min(_this17.scrollWidth - _this17.width, _this17.el.scrollLeft + deltaX));

      if (Math.floor(scrollX) === Math.floor(_this17.el.scrollLeft)) {
        return;
      }

      const index = Math.round(_this17.positionToIndex(scrollX) * 100) / 100;

      _this17.updateSelectedTabIndex(index); // update last X value


      _this17.lastPosX = coords.x;

      _this17.el.scroll(scrollX, 0);
    })();
  }

  onTouchEnd(ev) {
    var _this18 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this18.swipeEnabled || !_this18.isDragging) {
        return;
      }

      const coords = (0,_utils_640d2cf5_js__WEBPACK_IMPORTED_MODULE_2__.p)(ev);

      const deltaTime = (0,_utils_640d2cf5_js__WEBPACK_IMPORTED_MODULE_2__.a)() - _this18.initialTimestamp;

      const shortSwipe = _this18.config.shortSwipeDuration > 0 && deltaTime <= _this18.config.shortSwipeDuration;
      const shortSwipeDelta = coords.x - _this18.initialCoords.x;

      let selectedTabIndex = _this18.calcSelectedTab();

      const expectedTabIndex = Math.round(selectedTabIndex);

      if (shortSwipe && expectedTabIndex === _this18._activeTabIndex) {
        selectedTabIndex += shortSwipeDelta > 0 ? -1 : 1;
      }

      selectedTabIndex = _this18.normalizeSelectedTab(selectedTabIndex);

      _this18.updateActiveTabIndex(selectedTabIndex);

      _this18.moveContainerByIndex(selectedTabIndex, true);

      _this18.isDragging = false;
      _this18.initialCoords = void 0;
      _this18.lastPosX = void 0;
    })();
  }

  updateWidth() {
    const boundingRect = this.el.getBoundingClientRect();
    this.width = Math.round(boundingRect.width * 10000) / 10000;
  }

  indexTabs() {
    var _this19 = this;

    return (0,C_FunerCien_WAC_HWAC_med_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this19.width === 0) {
        requestAnimationFrame(() => {
          _this19.updateWidth();

          _this19.indexTabs();
        });
        return;
      }

      const tabs = Array.from(_this19.el.querySelectorAll('super-tab'));
      _this19.scrollWidth = _this19.width * tabs.length;

      _this19.debug('indexTab', _this19.scrollWidth, _this19.width);

      yield Promise.all(tabs.map(t => t.componentOnReady()));
      _this19.tabs = tabs;

      if (_this19.ready && typeof _this19._activeTabIndex === 'number') {
        _this19.moveContainerByIndex(_this19._activeTabIndex, true);
      }

      if (_this19.config) {
        switch (_this19.config.sideMenu) {
          case 'both':
            _this19.rightThreshold = _this19.leftThreshold = _this19.config.sideMenuThreshold || 0;
            break;

          case 'left':
            _this19.leftThreshold = _this19.config.sideMenuThreshold || 0;
            break;

          case 'right':
            _this19.rightThreshold = _this19.config.sideMenuThreshold || 0;
            break;
        }
      }

      if (_this19._activeTabIndex !== undefined) {
        _this19.moveContainerByIndex(_this19._activeTabIndex, false).then(() => {
          _this19.ready = true;
        });
      }
    })();
  }

  calcSelectedTab() {
    const scrollX = Math.max(0, Math.min(this.scrollWidth - this.width, this.el.scrollLeft));
    return this.positionToIndex(scrollX);
  }

  positionToIndex(scrollX) {
    const tabWidth = this.width;
    return scrollX / tabWidth;
  }

  indexToPosition(tabIndex) {
    return Math.round(tabIndex * this.width * 10000) / 10000;
  }

  normalizeSelectedTab(index) {
    const scrollX = Math.max(0, Math.min(this.scrollWidth - this.width, this.indexToPosition(index)));
    return Math.round(scrollX / this.width);
  }
  /**
   * Internal method to output values in debug mode.
   */


  debug(...vals) {
    (0,_utils_640d2cf5_js__WEBPACK_IMPORTED_MODULE_2__.d)(this.config, 'container', vals);
  }

  render() {
    return (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null);
  }

  get el() {
    return (0,_index_a34c410e_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

}

SuperTabsContainerComponent.style = superTabsContainerComponentCss;


/***/ })

}]);
//# sourceMappingURL=node_modules_ionic-super-tabs_core_dist_esm_super-tab_3_entry_js.js.map